main.test.message = test
format.string=First random number is %o and second is %o
format.bound=100

csv.path=src/main/resources/data/csv/
csv.extension=.csv

xml.path=src/main/resources/data/xml/
xml.extension=.xml

msg.null = Something is null
msg.material_not_founded = Material not founded
msg.customer_not_founded = Customer not founded
msg.project_not_founded = Project not founded
msg.wrong_project_type = Wrong project type
msg.forbidden = Forbidden
msg.fursuit_part_not_founded = Fursuit part not founded
msg.empty = Something is empty
msg.outgoings_not_founded = Outgoings not founded
msg.edit_material_success = Material changed successfully
msg.delete_material_success = Material successfully deleted
msg.edit_customer_success = The customer successfully changed
msg.delete_customer_success = The customer was successfully deleted
msg.edit_project_success = The project was successfully saved
msg.delete_project_success = The project was successfully deleted

new_line = \n
format.customer.toString = Name: %s\nURL: %s\nPhone number: %s\n
format.project_base.toString = Project type: %s\nName: %s\nCustomer: \n%sPayment type: %s\nDate of creation: %s\nDeadline: %s\nProgress: %.2f\n
format.art_project.toString = Art type: %s\nArt style: %s\nCost: %.2s\n
format.toy_project.toString = Toy type: %s\nToy style: %s\n
format.fursuit_project.toString = Fursuit type: %s\nFursuit style: %s\n
format.fursuit_part.toString = Part name: %s\nProgress: %.2f\nDate of creation %s\n
format.outgoings_titles = Name\tPrice\tQuantity\tCost\n
format.outgoings.toString = %s, %.2f, %.2f, %.2f\n

estimate_title = Estimate:\n
amount_title = Amount: 
fursuit_parts_title = Fursuit parts:\n

h2.Driver = org.h2.Driver
connection_url =jdbc:h2:mem:calculator
table.create_customer = create table if not exists CUSTOMER( ID LONG auto_increment, USER_ID LONG not null, DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null, NAME VARCHAR not null, URL VARCHAR not null, PHONE_NUMBER VARCHAR not null, constraint CUSTOMER_PK primary key (ID));
table.create_material = create table if not exists MATERIAL( ID LONG auto_increment, USER_ID LONG not null, DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null, MATERIAL_NAME VARCHAR not null, MATERIAL_TYPE INT not null, COST FLOAT not null, DESCRIPTION VARCHAR not null, UNIT INT not null, IN_STOCK FLOAT not null, constraint MATERIAL_PK primary key (ID));
table.create_art_project = create table if not exists ART( ID LONG auto_increment, USER_ID LONG not null, CUSTOMER LONG not null, DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null, DEADLINE TIMESTAMP not null, NAME VARCHAR not null, PROGRESS FLOAT not null, PAYMENT_TYPE INT not null, PROJECT_TYPE INT not null, ART_TYPE INT not null, ART_STYLE INT not null, COST DOUBLE not null, constraint ART_PK primary key (ID), constraint ART_CUSTOMER_ID_FK foreign key (CUSTOMER) references CUSTOMER (ID) on update cascade on delete cascade);
table.create_fursuit_project = create table if not exists FURSUIT( ID LONG auto_increment, USER_ID LONG not null, CUSTOMER LONG not null, DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null, DEADLINE TIMESTAMP not null, NAME VARCHAR not null, PROGRESS FLOAT not null, PAYMENT_TYPE INT not null, PROJECT_TYPE INT not null, FURSUIT_TYPE INT not null, FURSUIT_STYLE INT not null, constraint FURSUIT_PK primary key (ID), constraint FURSUIT_CUSTOMER_ID_FK foreign key (CUSTOMER) references CUSTOMER (ID) on update cascade on delete cascade);
table.create_fursuit_part = create table if not exists FURSUIT_PART( ID LONG auto_increment, USER_ID LONG not null, DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null, NAME VARCHAR, PROGRESS FLOAT not null, PROJECT_ID LONG not null, constraint FURSUIT_PART_PK primary key (ID), constraint FURSUIT_PART_FURSUIT_ID_FK foreign key (PROJECT_ID) references FURSUIT (ID) on update cascade on delete cascade);
table.create_fursuit_part_outgoings = create table if not exists FURSUIT_PART_OUTGOINGS( FURSUIT_PART_ID LONG not null, MATERIAL_ID LONG not null, AMOUNT DOUBLE not null, constraint FURSUIT_PART_OUTGOINGS_PK primary key (FURSUIT_PART_ID, MATERIAL_ID), constraint FURSUIT_PART_OUTGOINGS_FURSUIT_PART_ID_FK foreign key (FURSUIT_PART_ID) references FURSUIT_PART (ID) on update cascade on delete cascade, constraint FURSUIT_PART_OUTGOINGS_MATERIAL_ID_FK foreign key (MATERIAL_ID) references MATERIAL (ID) on update cascade on delete cascade);
table.create_toy_project = create table if not exists TOY (  ID LONG auto_increment,  USER_ID LONG not null,  CUSTOMER LONG not null,  DATE_OF_CREATION TIMESTAMP default CURRENT_TIME not null,  DEADLINE TIMESTAMP not null,  NAME VARCHAR not null,  PROGRESS FLOAT not null,  PAYMENT_TYPE INT,  PROJECT_TYPE INT not null,  TOY_STYLE INT not null,  TOY_TYPE INT not null,  constraint TOY_PK  primary key (ID),  constraint TOY_CUSTOMER_ID_FK  foreign key (CUSTOMER) references CUSTOMER (ID) on update cascade on delete cascade);
table.create_toy_project_outgoings = create table if not exists TOY_OUTGOINGS( TOY_ID LONG not null, MATERIAL_ID LONG not null, AMOUNT DOUBLE not null, constraint TOY_OUTGOINGS_PK primary key (TOY_ID, MATERIAL_ID), constraint TOY_OUTGOINGS_MATERIAL_ID_FK foreign key (MATERIAL_ID) references MATERIAL (ID) on update cascade on delete cascade, constraint TOY_OUTGOINGS_TOY_ID_FK foreign key (TOY_ID) references TOY (ID) on update cascade on delete cascade);

table.drop_customer = drop table if exists CUSTOMER;
table.drop_material = drop table if exists MATERIAL;
table.drop_art_project = drop table if exists ART;
table.drop_fursuit_project = drop table if exists FURSUIT;
table.drop_fursuit_part=drop table if exists FURSUIT_PART;
table.drop_fursuit_part_outgoings=drop table if exists FURSUIT_PART_OUTGOINGS;
table.drop_toy_project=drop table if exists TOY;
table.drop_toy_project_outgoings = drop table if exists TOY_OUTGOINGS;

column_label.max_id = MAX_ID
column_label.amount = AMOUNT

column_label.material_id = ID
column_label.material_user_id = USER_ID
column_label.material_name = MATERIAL_NAME
column_label.material_date_of_creation = DATE_OF_CREATION
column_label.material_cost = COST
column_label.material_description = DESCRIPTION
column_label.material_in_stock = IN_STOCK
column_label.material_type = MATERIAL_TYPE
column_label.material_unit = UNIT

column_label.customer_id = ID
column_label.customer_user_id = USER_ID
column_label.customer_name = NAME
column_label.customer_date_of_creation = DATE_OF_CREATION
column_label.customer_phone_number = PHONE_NUMBER
column_label.customer_url = URL

column_label.art_id = ID
column_label.art_user_id = USER_ID
column_label.art_customer = CUSTOMER
column_label.art_date_of_creation = DATE_OF_CREATION
column_label.art_deadline = DEADLINE
column_label.art_name = NAME
column_label.art_cost = COST
column_label.art_progress = PROGRESS
column_label.art_project_type = PROJECT_TYPE
column_label.art_payment_type = PAYMENT_TYPE
column_label.art_style = ART_STYLE
column_label.art_type = ART_TYPE

column_label.fursuit_id = ID
column_label.fursuit_user_id = USER_ID
column_label.fursuit_customer = CUSTOMER
column_label.fursuit_date_of_creation = DATE_OF_CREATION
column_label.fursuit_deadline = DEADLINE
column_label.fursuit_name = NAME
column_label.fursuit_progress = PROGRESS
column_label.fursuit_project_type = PROJECT_TYPE
column_label.fursuit_payment_type = PAYMENT_TYPE
column_label.fursuit_style = FURSUIT_STYLE
column_label.fursuit_type = FURSUIT_TYPE

column_label.toy_id = ID
column_label.toy_user_id = USER_ID
column_label.toy_customer = CUSTOMER
column_label.toy_date_of_creation = DATE_OF_CREATION
column_label.toy_deadline = DEADLINE
column_label.toy_name = NAME
column_label.toy_progress = PROGRESS
column_label.toy_project_type = PROJECT_TYPE
column_label.toy_payment_type = PAYMENT_TYPE
column_label.toy_style = TOY_STYLE
column_label.toy_type = TOY_TYPE

column_label.fursuit_part_id = ID
column_label.fursuit_part_user_id = USER_ID
column_label.fursuit_part_name = NAME
column_label.fursuit_part_date_of_creation = DATE_OF_CREATION
column_label.fursuit_part_progress = PROGRESS

request.next_project_id = SELECT max(id) as MAX_ID FROM ((SELECT id from ART) union (select id from TOY) union (select id from FURSUIT));

request.create_customer = INSERT INTO PUBLIC.CUSTOMER (USER_ID, NAME, URL, PHONE_NUMBER) VALUES (%d, '%s', '%s', '%s')
request.create_material = INSERT INTO PUBLIC.MATERIAL (USER_ID, MATERIAL_NAME, MATERIAL_TYPE, COST, DESCRIPTION, UNIT, IN_STOCK) VALUES (%d, '%s', %d, %.2f, '%s', %d, %.2f)
request.create_art_project = INSERT INTO PUBLIC.ART (ID, USER_ID, CUSTOMER, DEADLINE, NAME, PROGRESS, PAYMENT_TYPE, PROJECT_TYPE, ART_TYPE, ART_STYLE, COST) VALUES (%d, %d, %d, parsedatetime ('%s', '%s'), '%s', 0, %d, %d, %d, %d, %.2f)
request.create_fursuit_project = INSERT INTO PUBLIC.FURSUIT (ID, USER_ID, CUSTOMER, DEADLINE, NAME, PROGRESS, PAYMENT_TYPE, PROJECT_TYPE, FURSUIT_TYPE, FURSUIT_STYLE) VALUES (%d, %d, %d, parsedatetime ('%s', '%s'), '%s', 0, %d, %d, %d, %d)
request.create_fursuit_part = INSERT INTO PUBLIC.FURSUIT_PART (USER_ID, NAME, PROGRESS, PROJECT_ID) VALUES (%d, '%s', 0.0, %d)
request.create_toy_project = INSERT INTO PUBLIC.TOY (ID, USER_ID, CUSTOMER, DEADLINE, NAME, PROGRESS, PAYMENT_TYPE, PROJECT_TYPE, TOY_STYLE, TOY_TYPE) VALUES (%d, %d, %d, parsedatetime ('%s', '%s'), '%s', 0, %d, %d, %d, %d);

request.set_toy_project_outgoings = MERGE INTO PUBLIC.TOY_OUTGOINGS (TOY_ID, MATERIAL_ID, AMOUNT) VALUES (%d, %d, %f)
request.set_fursuit_part_outgoings = MERGE INTO PUBLIC.FURSUIT_PART_OUTGOINGS (FURSUIT_PART_ID, MATERIAL_ID, AMOUNT) VALUES (%d, %d, %f)

request.update_customer = UPDATE PUBLIC.CUSTOMER t SET t.NAME = '%s', t.URL = '%s', t.PHONE_NUMBER = '%s' WHERE t.ID = %d and t.USER_ID = %d
request.update_material = UPDATE PUBLIC.MATERIAL t SET t.MATERIAL_NAME = '%s', t.MATERIAL_TYPE = %d, t.COST = %.2f, t.DESCRIPTION = '%s', t.UNIT = %d, t.IN_STOCK = %.2f WHERE t.ID = %d and t.USER_ID = %d
request.update_art_project = UPDATE PUBLIC.ART t SET t.CUSTOMER = %d, t.DEADLINE = parsedatetime ('%s', '%s'), t.NAME = '%s', t.PROGRESS = %f, t.PAYMENT_TYPE = %d, t.ART_TYPE = %d, t.ART_STYLE = %d, t.COST = %f WHERE t.ID = %d and t.USER_ID = %d
request.update_fursuit_project = UPDATE PUBLIC.FURSUIT t SET t.CUSTOMER = %d, t.DEADLINE = parsedatetime ('%s', '%s'), t.NAME = '%s', t.PROGRESS = %f, t.PAYMENT_TYPE = %d, t.FURSUIT_TYPE = %d, t.FURSUIT_STYLE = %d WHERE t.ID = %d and t.USER_ID = %d
request.update_fursuit_part = Update public.FURSUIT_PART t set t.NAME = '%s', t.PROGRESS = 0.0 where t.ID = %d and t.USER_ID = %d
request.update_toy_project = UPDATE PUBLIC.TOY t SET t.CUSTOMER = %d, t.DEADLINE = parsedatetime ('%s', '%s'), t.NAME = '%s', t.PROGRESS = %f, t.PAYMENT_TYPE = %d, t.TOY_STYLE = %d, t.TOY_TYPE = %d WHERE t.ID = %d and t.USER_ID = %d

request.delete_toy_project_outgoings = DELETE FROM PUBLIC.TOY_OUTGOINGS WHERE TOY_ID = %d AND MATERIAL_ID = %d
request.delete_fursuit_part_outgoings = DELETE FROM PUBLIC.FURSUIT_PART_OUTGOINGS WHERE FURSUIT_PART_ID = %d AND MATERIAL_ID = %d

request.delete_customer = delete from CUSTOMER where USER_ID = %d and ID = %d
request.delete_material = delete from MATERIAL where USER_ID = %d and ID = %d
request.delete_art_project = DELETE FROM ART WHERE USER_ID = %d and ID = %d
request.delete_fursuit_project = DELETE FROM FURSUIT WHERE USER_ID = %d and ID = %d
request.delete_fursuit_part = DELETE FROM PUBLIC.FURSUIT_PART WHERE ID = %d AND USER_ID = %d AND PROJECT_ID = %d
request.delete_toy_project = DELETE FROM TOY WHERE USER_ID = %d and ID = %d

request.select_optional_customer = SELECT * FROM CUSTOMER WHERE USER_ID = %d and ID = %d
request.select_optional_material = Select * from MATERIAL where USER_ID = %d and ID = %d
request.select_optional_art_project = SELECT * FROM ART WHERE USER_ID = %d and ID = %d
request.select_optional_fursuit_project = SELECT * FROM FURSUIT WHERE USER_ID = %d and ID = %d
request.select_optional_fursuit_part = SELECT * FROM  PUBLIC.FURSUIT_PART WHERE USER_ID = %d and ID = %d
request.select_optional_toy_project = SELECT * FROM TOY WHERE USER_ID = %d and ID = %d

request.select_list_customer = Select * from CUSTOMER where USER_ID = %d
request.select_list_material = Select * from MATERIAL where USER_ID = %d
request.select_list_art_project = SELECT * FROM ART WHERE USER_ID = %d
request.select_list_fursuit_project = SELECT * FROM FURSUIT WHERE USER_ID = %d
request.select_list_fursuit_part_all = Select * from PUBLIC.FURSUIT_PART where USER_ID = %d
request.select_list_fursuit_part_in_project = Select * from PUBLIC.FURSUIT_PART where USER_ID = %d and PROJECT_ID = %d
request.select_list_fursuit_part_outgoings = SELECT MATERIAL.*, AMOUNT FROM MATERIAL INNER JOIN FURSUIT_PART_OUTGOINGS FPO on MATERIAL.ID = FPO.MATERIAL_ID WHERE FPO.FURSUIT_PART_ID = %d
request.select_list_toy_project = SELECT * FROM TOY WHERE USER_ID = %d
request.select_list_toy_project_outgoings = SELECT MATERIAL.*, AMOUNT FROM MATERIAL INNER JOIN TOY_OUTGOINGS TO on MATERIAL.ID = TO.MATERIAL_ID WHERE TO.TOY_ID = %d